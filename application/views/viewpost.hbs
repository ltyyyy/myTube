<main class="video-page">
    <!-- Video player -->
    <div class="video-container">
        <video class="video-player" controls>
            <source src="/posts/video/{{currentPost.id}}" type="video/mp4">
        </video>
    </div>

    <!-- Video information -->
    <div class="video-info">
        <h1 class="video-title">{{currentPost.title}}</h1>
        <div class="video-meta">
            <div class="video-author">
                <div class="author-avatar">{{{currentPost.avatar}}}</div>
                <span class="author-name">{{currentPost.username}}</span>
            </div>
        </div>
        <div class="video-description">
            <p class="video-date">{{formatDate currentPost.createdAt}}</p>
            <p class="description-content">{{currentPost.description}}</p>
        </div>
    </div>

    <!-- Comments Section -->
    <div class="comments-section">
        <h2 class="comments-header">{{commentsCount}} Comments</h2>
        
        <!-- Comment form -->
        <div class="comment-form">
            <div class="comment-avatar">{{{user.avatar}}}</div>
            <div class="comment-input-container">
                <textarea id="comment-text" class="comment-input" placeholder="Add a comment..." rows="1"></textarea>
                <div class="comment-actions">
                    <button id="cancel-comment" class="comment-cancel">Cancel</button>
                    <button id="submit-comment" class="comment-submit" data-postid="{{currentPost.id}}">Comment</button>
                </div>
            </div>
        </div>

        <!-- Comments list -->
        <div id="comments" class="comments-list">
            {{#each currentPost.comments}}
            <div class="comment">
                <div class="comment-avatar">{{{this.avatar}}}</div>
                <div class="comment-content">
                    <div class="comment-header">
                        <span class="comment-author">@{{this.username}}</span>
                        <span class="comment-date">{{formatDateString this.createdAt}}</span>
                    </div>
                    <p class="comment-text">{{this.text}}</p>
                    <div class="comment-actions">
                        <button class="comment-like">
                            <i class="fa fa-thumbs-up"></i> Like
                        </button>
                        <button class="comment-reply">Reply</button>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const commentForm = document.querySelector('.comment-form');
            const commentInput = document.getElementById('comment-text');
            const cancelButton = document.getElementById('cancel-comment');
            const submitButton = document.getElementById('submit-comment');
            
            // User login status passed from the server
            const isLoggedIn = {{#if user}}true{{else}}false{{/if}};

            commentInput.addEventListener('focus', () => {
                // If not logged in, show message and redirect
                if (!isLoggedIn) {
                    alert('You need to log in to comment.');
                    window.location.href = '/login'; // Redirect to the login page
                } else {
                    commentForm.classList.add('active');
                }
            });

            // Event listener to change submit button style based on input
            commentInput.addEventListener('input', () => {
                let commentText = commentInput.value.trim();

                if (commentText.length > 0) {
                    // Enable submit button
                    submitButton.style.backgroundColor = '#0556BF';
                    submitButton.style.color = 'white';
                    submitButton.style.cursor = 'pointer';
                    submitButton.disabled = false;
                } else {
                    // Revert submit button to default state
                    submitButton.style.backgroundColor = '#f2f2f2';
                    submitButton.style.color = '#909090';
                    submitButton.style.cursor = 'default';
                    submitButton.disabled = true;
                }
                autoExpand();
            });

            cancelButton.addEventListener('click', () => {
                commentForm.classList.remove('active');
                commentInput.value = '';
                // Reset submit button state
                submitButton.style.backgroundColor = '#f2f2f2';
                submitButton.style.color = '#909090';
                submitButton.style.cursor = 'default';
                submitButton.disabled = true;
                autoExpand();
            });

            submitButton.addEventListener('click', function(ev) {
                let commentText = commentInput.value.trim();
                if (!commentText) return; // Prevent submission if text is empty
                var postId = this.dataset.postid;
                
                fetch("/comments/create", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        postId: postId,
                        comment: commentText
                    })
                })
                .then(response => response.json())
                .then(data => {
                    var commentsContainer = document.getElementById('comments');
                    let commentElement = document.createElement('div');
                    commentElement.className = 'comment';
                    commentElement.innerHTML = `
                        <div class="comment-avatar">${data.userAvatar}</div>
                        <div class="comment-content">
                            <div class="comment-header">
                                <span class="comment-author">@${data.username}</span>
                                <span class="comment-date">Just now</span>
                            </div>
                            <p class="comment-text">${data.commentText}</p>
                            <div class="comment-actions">
                                <button class="comment-like">
                                    <i class="fa fa-thumbs-up"></i> Like
                                </button>
                                <button class="comment-reply">Reply</button>
                            </div>
                        </div>
                    `;
                    commentsContainer.insertBefore(commentElement, commentsContainer.firstChild);
                    commentInput.value = "";
                    commentForm.classList.remove('active');

                    // Update comment count
                    const commentsHeader = document.querySelector('.comments-header');
                    commentsHeader.textContent = `${data.commentCount} Comments`;

                    // Reset submit button state
                    submitButton.style.backgroundColor = '#f2f2f2';
                    submitButton.style.color = '#909090';
                    submitButton.style.cursor = 'default';
                    submitButton.disabled = true;
                    autoExpand();
                })
                .catch(err => console.log(err));
            });

            // Function to auto expand textarea based on content
            function autoExpand() {
                commentInput.style.height = 'auto'; // Reset height
                const paddingTop = parseInt(window.getComputedStyle(commentInput, null).getPropertyValue('padding-top'));
                const paddingBottom = parseInt(window.getComputedStyle(commentInput, null).getPropertyValue('padding-bottom'));
                commentInput.style.height = (commentInput.scrollHeight - (paddingTop + paddingBottom)) + 'px';
            }

            // Expand textarea on page load and resize
            window.addEventListener('load', autoExpand);
            window.addEventListener('resize', autoExpand);
        });
    </script>
</main>
